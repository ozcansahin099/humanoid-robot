CCS PCM C Compiler, Version 5.007, 61971               02-May-19 15:59

               Filename:   C:\Users\özcan\Desktop\dosyalarým\ÖZCAN SAHÝN\PROJELER\PROJE2-GÖREV ROBOTU\ÝNSANSI robot dökümanlarý\c kodu\main.lst

               ROM used:   1137 words (14%)
                           Largest free fragment is 2048
               RAM used:   53 (14%) at main() level
                           72 (20%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   289
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.5
001A:  GOTO   01D
001B:  BTFSC  0C.5
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   046
.................... #include <16f877A.h>    
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0031:  MOVLW  10
0032:  MOVWF  58
0033:  CLRF   77
0034:  CLRF   7A
0035:  RRF    55,F
0036:  RRF    54,F
0037:  BTFSS  03.0
0038:  GOTO   03F
0039:  MOVF   56,W
003A:  ADDWF  77,F
003B:  BTFSC  03.0
003C:  INCF   7A,F
003D:  MOVF   57,W
003E:  ADDWF  7A,F
003F:  RRF    7A,F
0040:  RRF    77,F
0041:  RRF    79,F
0042:  RRF    78,F
0043:  DECFSZ 58,F
0044:  GOTO   035
0045:  RETURN
*
024E:  CLRF   78
024F:  CLRF   79
0250:  CLRF   77
0251:  CLRF   7A
0252:  MOVF   52,W
0253:  BTFSS  03.2
0254:  GOTO   258
0255:  MOVF   51,W
0256:  BTFSC  03.2
0257:  GOTO   272
0258:  MOVLW  10
0259:  MOVWF  53
025A:  BCF    03.0
025B:  RLF    4F,F
025C:  RLF    50,F
025D:  RLF    77,F
025E:  RLF    7A,F
025F:  MOVF   52,W
0260:  SUBWF  7A,W
0261:  BTFSS  03.2
0262:  GOTO   265
0263:  MOVF   51,W
0264:  SUBWF  77,W
0265:  BTFSS  03.0
0266:  GOTO   26E
0267:  MOVF   51,W
0268:  SUBWF  77,F
0269:  BTFSS  03.0
026A:  DECF   7A,F
026B:  MOVF   52,W
026C:  SUBWF  7A,F
026D:  BSF    03.0
026E:  RLF    78,F
026F:  RLF    79,F
0270:  DECFSZ 53,F
0271:  GOTO   25A
0272:  BCF    0A.3
0273:  BCF    0A.4
0274:  GOTO   32E (RETURN)
....................  
.................... #list 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... #fuses XT,NOWDT,NOLVP,NOPROTECT,NOBROWNOUT,NOLVP,NOPUT,NOCPD 
.................... #USE delay(clock=4000000) 
*
0239:  MOVLW  50
023A:  MOVWF  04
023B:  BCF    03.7
023C:  MOVF   00,W
023D:  BTFSC  03.2
023E:  GOTO   24D
023F:  MOVLW  01
0240:  MOVWF  78
0241:  CLRF   77
0242:  DECFSZ 77,F
0243:  GOTO   242
0244:  DECFSZ 78,F
0245:  GOTO   241
0246:  MOVLW  4A
0247:  MOVWF  77
0248:  DECFSZ 77,F
0249:  GOTO   248
024A:  GOTO   24B
024B:  DECFSZ 00,F
024C:  GOTO   23F
024D:  RETURN
*
0275:  MOVLW  12
0276:  SUBWF  50,F
0277:  BTFSS  03.0
0278:  GOTO   288
0279:  MOVLW  50
027A:  MOVWF  04
027B:  BCF    03.7
027C:  MOVLW  FC
027D:  ANDWF  00,F
027E:  BCF    03.0
027F:  RRF    00,F
0280:  RRF    00,F
0281:  MOVF   00,W
0282:  BTFSC  03.2
0283:  GOTO   288
0284:  GOTO   286
0285:  NOP
0286:  DECFSZ 00,F
0287:  GOTO   285
0288:  RETURN
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, parity=N, stop=1) 
....................  
.................... //#use fast_io (A) //trisleri kendimiz ayarlayalim 
.................... #use fast_io (B) 
.................... #byte INTCON=0x0B 
.................... #byte PIE1=0x8C 
....................  
....................  
....................  
....................  
....................  
.................... int16 distance,time; 
....................  
....................  
.................... long s1=650,s2=650,s3=650,s4=650,s5=650,s6=650,s7=650,s8=650,s9=650,s10=650,s11=650,s12=650,s13=650,s14=650,s15=650,s16=650; //darbe genislik sureleri, mikrosaniye cinsinden 
.................... long veri; //kesme ile gelen data 
.................... int sira=1; //gelen verininin hangi servoya gönderildiði bilgisini tutar 
....................  
....................  
.................... void main(){ 
0289:  MOVLW  19
028A:  BSF    03.5
028B:  MOVWF  19
028C:  MOVLW  A6
028D:  MOVWF  18
028E:  MOVLW  90
028F:  BCF    03.5
0290:  MOVWF  18
0291:  MOVLW  02
0292:  MOVWF  2C
0293:  MOVLW  8A
0294:  MOVWF  2B
0295:  MOVLW  02
0296:  MOVWF  2E
0297:  MOVLW  8A
0298:  MOVWF  2D
0299:  MOVLW  02
029A:  MOVWF  30
029B:  MOVLW  8A
029C:  MOVWF  2F
029D:  MOVLW  02
029E:  MOVWF  32
029F:  MOVLW  8A
02A0:  MOVWF  31
02A1:  MOVLW  02
02A2:  MOVWF  34
02A3:  MOVLW  8A
02A4:  MOVWF  33
02A5:  MOVLW  02
02A6:  MOVWF  36
02A7:  MOVLW  8A
02A8:  MOVWF  35
02A9:  MOVLW  02
02AA:  MOVWF  38
02AB:  MOVLW  8A
02AC:  MOVWF  37
02AD:  MOVLW  02
02AE:  MOVWF  3A
02AF:  MOVLW  8A
02B0:  MOVWF  39
02B1:  MOVLW  02
02B2:  MOVWF  3C
02B3:  MOVLW  8A
02B4:  MOVWF  3B
02B5:  MOVLW  02
02B6:  MOVWF  3E
02B7:  MOVLW  8A
02B8:  MOVWF  3D
02B9:  MOVLW  02
02BA:  MOVWF  40
02BB:  MOVLW  8A
02BC:  MOVWF  3F
02BD:  MOVLW  02
02BE:  MOVWF  42
02BF:  MOVLW  8A
02C0:  MOVWF  41
02C1:  MOVLW  02
02C2:  MOVWF  44
02C3:  MOVLW  8A
02C4:  MOVWF  43
02C5:  MOVLW  02
02C6:  MOVWF  46
02C7:  MOVLW  8A
02C8:  MOVWF  45
02C9:  MOVLW  02
02CA:  MOVWF  48
02CB:  MOVLW  8A
02CC:  MOVWF  47
02CD:  MOVLW  02
02CE:  MOVWF  4A
02CF:  MOVLW  8A
02D0:  MOVWF  49
02D1:  MOVLW  01
02D2:  MOVWF  4D
02D3:  MOVLW  FF
02D4:  MOVWF  4E
02D5:  BSF    03.5
02D6:  BSF    1F.0
02D7:  BSF    1F.1
02D8:  BSF    1F.2
02D9:  BCF    1F.3
02DA:  MOVLW  07
02DB:  MOVWF  1C
02DC:  BCF    03.7
02DD:  MOVLW  1F
02DE:  ANDWF  03,F
....................  
....................    setup_psp(PSP_DISABLED); 
02DF:  BCF    09.4
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
02E0:  MOVLW  B5
02E1:  BCF    03.5
02E2:  MOVWF  10
....................    setup_timer_2(T2_DIV_BY_16,255,1); 
02E3:  MOVLW  00
02E4:  MOVWF  78
02E5:  IORLW  06
02E6:  MOVWF  12
02E7:  MOVLW  FF
02E8:  BSF    03.5
02E9:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS);     
02EA:  BSF    1F.0
02EB:  BSF    1F.1
02EC:  BSF    1F.2
02ED:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
02EE:  BCF    03.5
02EF:  BCF    1F.0
....................      
....................     INTCON=0b11000000; //global ve peripheral kesmeler aktif 
02F0:  MOVLW  C0
02F1:  MOVWF  0B
....................     PIE1=0b00100000; //uart kesmesi ayarlandý.kesme etkin hale getirildi 
02F2:  MOVLW  20
02F3:  BSF    03.5
02F4:  MOVWF  0C
....................      
....................      
....................     set_tris_b(0b00000000); 
02F5:  MOVLW  00
02F6:  MOVWF  06
....................     output_b(0x00); 
02F7:  BCF    03.5
02F8:  CLRF   06
....................     delay_ms(1000); 
02F9:  MOVLW  04
02FA:  MOVWF  4F
02FB:  MOVLW  FA
02FC:  MOVWF  50
02FD:  CALL   239
02FE:  DECFSZ 4F,F
02FF:  GOTO   2FB
....................   
....................  while(1){ 
.................... output_high(pin_a0);//trig=pin_a0 
0300:  BSF    03.5
0301:  BCF    05.0
0302:  BCF    03.5
0303:  BSF    05.0
.................... delay_us(15); 
0304:  MOVLW  04
0305:  MOVWF  77
0306:  DECFSZ 77,F
0307:  GOTO   306
0308:  GOTO   309
.................... output_low(pin_a0); 
0309:  BSF    03.5
030A:  BCF    05.0
030B:  BCF    03.5
030C:  BCF    05.0
.................... while(!input(pin_a1));//echo=pin_a1 
030D:  BSF    03.5
030E:  BSF    05.1
030F:  BCF    03.5
0310:  BTFSS  05.1
0311:  GOTO   30D
.................... set_timer1(0); 
0312:  CLRF   0E
0313:  CLRF   0F
0314:  CLRF   0E
.................... while(input(pin_a1)); 
0315:  BSF    03.5
0316:  BSF    05.1
0317:  BCF    03.5
0318:  BTFSC  05.1
0319:  GOTO   315
.................... time=get_timer1(); 
031A:  MOVF   0F,W
031B:  MOVWF  7A
031C:  MOVF   0E,W
031D:  MOVWF  77
031E:  MOVF   0F,W
031F:  SUBWF  7A,W
0320:  BTFSS  03.2
0321:  GOTO   31A
0322:  MOVF   77,W
0323:  MOVWF  29
0324:  MOVF   7A,W
0325:  MOVWF  2A
.................... distance=time/58; 
0326:  MOVF   2A,W
0327:  MOVWF  50
0328:  MOVF   29,W
0329:  MOVWF  4F
032A:  CLRF   52
032B:  MOVLW  3A
032C:  MOVWF  51
032D:  GOTO   24E
032E:  MOVF   79,W
032F:  MOVWF  28
0330:  MOVF   78,W
0331:  MOVWF  27
....................  
.................... if(distance<10) 
0332:  MOVF   28,F
0333:  BTFSS  03.2
0334:  GOTO   338
0335:  MOVF   27,W
0336:  SUBLW  09
0337:  BTFSS  03.0
.................... { 
....................  
....................   
....................  
.................... } 
....................  
....................       //1.kol 
....................       output_high(pin_b0); 
0338:  BSF    06.0
....................       delay_us(s1); 
0339:  MOVF   2C,W
033A:  MOVWF  4F
033B:  INCF   4F,F
033C:  DECF   4F,F
033D:  BTFSC  03.2
033E:  GOTO   343
033F:  MOVLW  FF
0340:  MOVWF  50
0341:  CALL   275
0342:  GOTO   33C
0343:  MOVF   2B,W
0344:  MOVWF  50
0345:  CALL   275
....................       output_low(pin_b0); 
0346:  BCF    06.0
....................  
....................       output_high(pin_b1); 
0347:  BSF    06.1
....................       delay_us(s2); 
0348:  MOVF   2E,W
0349:  MOVWF  4F
034A:  INCF   4F,F
034B:  DECF   4F,F
034C:  BTFSC  03.2
034D:  GOTO   352
034E:  MOVLW  FF
034F:  MOVWF  50
0350:  CALL   275
0351:  GOTO   34B
0352:  MOVF   2D,W
0353:  MOVWF  50
0354:  CALL   275
....................       output_low(pin_b1); 
0355:  BCF    06.1
....................  
....................       output_high(pin_b2); 
0356:  BSF    06.2
....................       delay_us(s3); 
0357:  MOVF   30,W
0358:  MOVWF  4F
0359:  INCF   4F,F
035A:  DECF   4F,F
035B:  BTFSC  03.2
035C:  GOTO   361
035D:  MOVLW  FF
035E:  MOVWF  50
035F:  CALL   275
0360:  GOTO   35A
0361:  MOVF   2F,W
0362:  MOVWF  50
0363:  CALL   275
....................       output_low(pin_b2); 
0364:  BCF    06.2
....................        
....................       output_high(pin_b3); 
0365:  BSF    06.3
....................       delay_us(s4); 
0366:  MOVF   32,W
0367:  MOVWF  4F
0368:  INCF   4F,F
0369:  DECF   4F,F
036A:  BTFSC  03.2
036B:  GOTO   370
036C:  MOVLW  FF
036D:  MOVWF  50
036E:  CALL   275
036F:  GOTO   369
0370:  MOVF   31,W
0371:  MOVWF  50
0372:  CALL   275
....................       output_low(pin_b3); 
0373:  BCF    06.3
....................        
....................       output_high(pin_b4); 
0374:  BSF    06.4
....................       delay_us(s5); 
0375:  MOVF   34,W
0376:  MOVWF  4F
0377:  INCF   4F,F
0378:  DECF   4F,F
0379:  BTFSC  03.2
037A:  GOTO   37F
037B:  MOVLW  FF
037C:  MOVWF  50
037D:  CALL   275
037E:  GOTO   378
037F:  MOVF   33,W
0380:  MOVWF  50
0381:  CALL   275
....................       output_low(pin_b4); 
0382:  BCF    06.4
....................        
....................        
....................       //2.kol 
....................       output_high(pin_c0); 
0383:  BCF    4E.0
0384:  MOVF   4E,W
0385:  BSF    03.5
0386:  MOVWF  07
0387:  BCF    03.5
0388:  BSF    07.0
....................       delay_us(s6); 
0389:  MOVF   36,W
038A:  MOVWF  4F
038B:  INCF   4F,F
038C:  DECF   4F,F
038D:  BTFSC  03.2
038E:  GOTO   393
038F:  MOVLW  FF
0390:  MOVWF  50
0391:  CALL   275
0392:  GOTO   38C
0393:  MOVF   35,W
0394:  MOVWF  50
0395:  CALL   275
....................       output_low(pin_c0); 
0396:  BCF    4E.0
0397:  MOVF   4E,W
0398:  BSF    03.5
0399:  MOVWF  07
039A:  BCF    03.5
039B:  BCF    07.0
....................        
....................       output_high(pin_c1); 
039C:  BCF    4E.1
039D:  MOVF   4E,W
039E:  BSF    03.5
039F:  MOVWF  07
03A0:  BCF    03.5
03A1:  BSF    07.1
....................       delay_us(s7); 
03A2:  MOVF   38,W
03A3:  MOVWF  4F
03A4:  INCF   4F,F
03A5:  DECF   4F,F
03A6:  BTFSC  03.2
03A7:  GOTO   3AC
03A8:  MOVLW  FF
03A9:  MOVWF  50
03AA:  CALL   275
03AB:  GOTO   3A5
03AC:  MOVF   37,W
03AD:  MOVWF  50
03AE:  CALL   275
....................       output_low(pin_c1); 
03AF:  BCF    4E.1
03B0:  MOVF   4E,W
03B1:  BSF    03.5
03B2:  MOVWF  07
03B3:  BCF    03.5
03B4:  BCF    07.1
....................        
....................       output_high(pin_c2); 
03B5:  BCF    4E.2
03B6:  MOVF   4E,W
03B7:  BSF    03.5
03B8:  MOVWF  07
03B9:  BCF    03.5
03BA:  BSF    07.2
....................       delay_us(s8); 
03BB:  MOVF   3A,W
03BC:  MOVWF  4F
03BD:  INCF   4F,F
03BE:  DECF   4F,F
03BF:  BTFSC  03.2
03C0:  GOTO   3C5
03C1:  MOVLW  FF
03C2:  MOVWF  50
03C3:  CALL   275
03C4:  GOTO   3BE
03C5:  MOVF   39,W
03C6:  MOVWF  50
03C7:  CALL   275
....................       output_low(pin_c2); 
03C8:  BCF    4E.2
03C9:  MOVF   4E,W
03CA:  BSF    03.5
03CB:  MOVWF  07
03CC:  BCF    03.5
03CD:  BCF    07.2
....................        
....................       output_high(pin_c3); 
03CE:  BCF    4E.3
03CF:  MOVF   4E,W
03D0:  BSF    03.5
03D1:  MOVWF  07
03D2:  BCF    03.5
03D3:  BSF    07.3
....................       delay_us(s9); 
03D4:  MOVF   3C,W
03D5:  MOVWF  4F
03D6:  INCF   4F,F
03D7:  DECF   4F,F
03D8:  BTFSC  03.2
03D9:  GOTO   3DE
03DA:  MOVLW  FF
03DB:  MOVWF  50
03DC:  CALL   275
03DD:  GOTO   3D7
03DE:  MOVF   3B,W
03DF:  MOVWF  50
03E0:  CALL   275
....................       output_low(pin_c3); 
03E1:  BCF    4E.3
03E2:  MOVF   4E,W
03E3:  BSF    03.5
03E4:  MOVWF  07
03E5:  BCF    03.5
03E6:  BCF    07.3
....................        
....................       output_high(pin_c4); 
03E7:  BCF    4E.4
03E8:  MOVF   4E,W
03E9:  BSF    03.5
03EA:  MOVWF  07
03EB:  BCF    03.5
03EC:  BSF    07.4
....................       delay_us(s10); 
03ED:  MOVF   3E,W
03EE:  MOVWF  4F
03EF:  INCF   4F,F
03F0:  DECF   4F,F
03F1:  BTFSC  03.2
03F2:  GOTO   3F7
03F3:  MOVLW  FF
03F4:  MOVWF  50
03F5:  CALL   275
03F6:  GOTO   3F0
03F7:  MOVF   3D,W
03F8:  MOVWF  50
03F9:  CALL   275
....................       output_low(pin_c4); 
03FA:  BCF    4E.4
03FB:  MOVF   4E,W
03FC:  BSF    03.5
03FD:  MOVWF  07
03FE:  BCF    03.5
03FF:  BCF    07.4
....................        
....................        
....................       //1.bacak 
....................       output_high(pin_b5); 
0400:  BSF    06.5
....................       delay_us(s11); 
0401:  MOVF   40,W
0402:  MOVWF  4F
0403:  INCF   4F,F
0404:  DECF   4F,F
0405:  BTFSC  03.2
0406:  GOTO   40B
0407:  MOVLW  FF
0408:  MOVWF  50
0409:  CALL   275
040A:  GOTO   404
040B:  MOVF   3F,W
040C:  MOVWF  50
040D:  CALL   275
....................       output_low(pin_b5); 
040E:  BCF    06.5
....................        
....................       output_high(pin_b6); 
040F:  BSF    06.6
....................       delay_us(s12); 
0410:  MOVF   42,W
0411:  MOVWF  4F
0412:  INCF   4F,F
0413:  DECF   4F,F
0414:  BTFSC  03.2
0415:  GOTO   41A
0416:  MOVLW  FF
0417:  MOVWF  50
0418:  CALL   275
0419:  GOTO   413
041A:  MOVF   41,W
041B:  MOVWF  50
041C:  CALL   275
....................       output_low(pin_b6); 
041D:  BCF    06.6
....................  
....................       output_high(pin_b7); 
041E:  BSF    06.7
....................       delay_us(s13); 
041F:  MOVF   44,W
0420:  MOVWF  4F
0421:  INCF   4F,F
0422:  DECF   4F,F
0423:  BTFSC  03.2
0424:  GOTO   429
0425:  MOVLW  FF
0426:  MOVWF  50
0427:  CALL   275
0428:  GOTO   422
0429:  MOVF   43,W
042A:  MOVWF  50
042B:  CALL   275
....................       output_low(pin_b7); 
042C:  BCF    06.7
....................        
....................        
....................        
....................       //2.bacak 
....................       output_high(pin_d0); 
042D:  BSF    03.5
042E:  BCF    08.0
042F:  BCF    03.5
0430:  BSF    08.0
....................       delay_us(s14); 
0431:  MOVF   46,W
0432:  MOVWF  4F
0433:  INCF   4F,F
0434:  DECF   4F,F
0435:  BTFSC  03.2
0436:  GOTO   43B
0437:  MOVLW  FF
0438:  MOVWF  50
0439:  CALL   275
043A:  GOTO   434
043B:  MOVF   45,W
043C:  MOVWF  50
043D:  CALL   275
....................       output_low(pin_d0); 
043E:  BSF    03.5
043F:  BCF    08.0
0440:  BCF    03.5
0441:  BCF    08.0
....................        
....................       output_high(pin_d1); 
0442:  BSF    03.5
0443:  BCF    08.1
0444:  BCF    03.5
0445:  BSF    08.1
....................       delay_us(s15); 
0446:  MOVF   48,W
0447:  MOVWF  4F
0448:  INCF   4F,F
0449:  DECF   4F,F
044A:  BTFSC  03.2
044B:  GOTO   450
044C:  MOVLW  FF
044D:  MOVWF  50
044E:  CALL   275
044F:  GOTO   449
0450:  MOVF   47,W
0451:  MOVWF  50
0452:  CALL   275
....................       output_low(pin_d1); 
0453:  BSF    03.5
0454:  BCF    08.1
0455:  BCF    03.5
0456:  BCF    08.1
....................  
....................       output_high(pin_d2); 
0457:  BSF    03.5
0458:  BCF    08.2
0459:  BCF    03.5
045A:  BSF    08.2
....................       delay_us(s16); 
045B:  MOVF   4A,W
045C:  MOVWF  4F
045D:  INCF   4F,F
045E:  DECF   4F,F
045F:  BTFSC  03.2
0460:  GOTO   465
0461:  MOVLW  FF
0462:  MOVWF  50
0463:  CALL   275
0464:  GOTO   45E
0465:  MOVF   49,W
0466:  MOVWF  50
0467:  CALL   275
....................       output_low(pin_d2); 
0468:  BSF    03.5
0469:  BCF    08.2
046A:  BCF    03.5
046B:  BCF    08.2
.................... delay_ms(100); 
046C:  MOVLW  64
046D:  MOVWF  50
046E:  CALL   239
046F:  GOTO   300
....................  
.................... } 
.................... }#INT_RDA 
.................... void seri_data_geldi(){ 
0470:  SLEEP
.................... veri=getc(); 
*
0046:  BTFSS  0C.5
0047:  GOTO   046
0048:  MOVF   1A,W
0049:  CLRF   4C
004A:  MOVWF  4B
....................  
....................  
.................... if(veri==200){ //sira ilk motorun 
004B:  MOVF   4B,W
004C:  SUBLW  C8
004D:  BTFSS  03.2
004E:  GOTO   054
004F:  MOVF   4C,F
0050:  BTFSS  03.2
0051:  GOTO   054
....................    sira=1; 
0052:  MOVLW  01
0053:  MOVWF  4D
.................... } 
.................... if(veri==201){//sira ikinci motorun 
0054:  MOVF   4B,W
0055:  SUBLW  C9
0056:  BTFSS  03.2
0057:  GOTO   05D
0058:  MOVF   4C,F
0059:  BTFSS  03.2
005A:  GOTO   05D
....................    sira=2; 
005B:  MOVLW  02
005C:  MOVWF  4D
.................... } 
.................... if(veri==202){//sira ucuncu motorun 
005D:  MOVF   4B,W
005E:  SUBLW  CA
005F:  BTFSS  03.2
0060:  GOTO   066
0061:  MOVF   4C,F
0062:  BTFSS  03.2
0063:  GOTO   066
....................    sira=3; 
0064:  MOVLW  03
0065:  MOVWF  4D
.................... } 
.................... if(veri==203){//sira dördüncü motorun 
0066:  MOVF   4B,W
0067:  SUBLW  CB
0068:  BTFSS  03.2
0069:  GOTO   06F
006A:  MOVF   4C,F
006B:  BTFSS  03.2
006C:  GOTO   06F
....................   sira=4; 
006D:  MOVLW  04
006E:  MOVWF  4D
.................... } 
....................  
.................... if(veri==204) 
006F:  MOVF   4B,W
0070:  SUBLW  CC
0071:  BTFSS  03.2
0072:  GOTO   078
0073:  MOVF   4C,F
0074:  BTFSS  03.2
0075:  GOTO   078
.................... { 
.................... sira=5; 
0076:  MOVLW  05
0077:  MOVWF  4D
.................... } 
.................... if(veri==205) 
0078:  MOVF   4B,W
0079:  SUBLW  CD
007A:  BTFSS  03.2
007B:  GOTO   081
007C:  MOVF   4C,F
007D:  BTFSS  03.2
007E:  GOTO   081
.................... { 
.................... sira=6; 
007F:  MOVLW  06
0080:  MOVWF  4D
.................... } 
.................... if(veri==206) 
0081:  MOVF   4B,W
0082:  SUBLW  CE
0083:  BTFSS  03.2
0084:  GOTO   08A
0085:  MOVF   4C,F
0086:  BTFSS  03.2
0087:  GOTO   08A
.................... { 
.................... sira=7; 
0088:  MOVLW  07
0089:  MOVWF  4D
.................... } 
.................... if(veri==207) 
008A:  MOVF   4B,W
008B:  SUBLW  CF
008C:  BTFSS  03.2
008D:  GOTO   093
008E:  MOVF   4C,F
008F:  BTFSS  03.2
0090:  GOTO   093
.................... { 
.................... sira=8; 
0091:  MOVLW  08
0092:  MOVWF  4D
.................... } 
.................... if(veri==208) 
0093:  MOVF   4B,W
0094:  SUBLW  D0
0095:  BTFSS  03.2
0096:  GOTO   09C
0097:  MOVF   4C,F
0098:  BTFSS  03.2
0099:  GOTO   09C
.................... { 
.................... sira=9; 
009A:  MOVLW  09
009B:  MOVWF  4D
.................... } 
.................... if(veri==209) 
009C:  MOVF   4B,W
009D:  SUBLW  D1
009E:  BTFSS  03.2
009F:  GOTO   0A5
00A0:  MOVF   4C,F
00A1:  BTFSS  03.2
00A2:  GOTO   0A5
.................... { 
.................... sira=10; 
00A3:  MOVLW  0A
00A4:  MOVWF  4D
.................... } 
.................... if(veri==210) 
00A5:  MOVF   4B,W
00A6:  SUBLW  D2
00A7:  BTFSS  03.2
00A8:  GOTO   0AE
00A9:  MOVF   4C,F
00AA:  BTFSS  03.2
00AB:  GOTO   0AE
.................... { 
.................... sira=11; 
00AC:  MOVLW  0B
00AD:  MOVWF  4D
.................... } 
.................... if(veri==211) 
00AE:  MOVF   4B,W
00AF:  SUBLW  D3
00B0:  BTFSS  03.2
00B1:  GOTO   0B7
00B2:  MOVF   4C,F
00B3:  BTFSS  03.2
00B4:  GOTO   0B7
.................... { 
.................... sira=12; 
00B5:  MOVLW  0C
00B6:  MOVWF  4D
.................... } 
.................... if(veri==212) 
00B7:  MOVF   4B,W
00B8:  SUBLW  D4
00B9:  BTFSS  03.2
00BA:  GOTO   0C0
00BB:  MOVF   4C,F
00BC:  BTFSS  03.2
00BD:  GOTO   0C0
.................... { 
.................... sira=13; 
00BE:  MOVLW  0D
00BF:  MOVWF  4D
.................... } 
.................... if(veri==213) 
00C0:  MOVF   4B,W
00C1:  SUBLW  D5
00C2:  BTFSS  03.2
00C3:  GOTO   0C9
00C4:  MOVF   4C,F
00C5:  BTFSS  03.2
00C6:  GOTO   0C9
.................... { 
.................... sira=14; 
00C7:  MOVLW  0E
00C8:  MOVWF  4D
.................... } 
.................... if(veri==214) 
00C9:  MOVF   4B,W
00CA:  SUBLW  D6
00CB:  BTFSS  03.2
00CC:  GOTO   0D2
00CD:  MOVF   4C,F
00CE:  BTFSS  03.2
00CF:  GOTO   0D2
.................... { 
.................... sira=15; 
00D0:  MOVLW  0F
00D1:  MOVWF  4D
.................... } 
.................... if(veri==215) 
00D2:  MOVF   4B,W
00D3:  SUBLW  D7
00D4:  BTFSS  03.2
00D5:  GOTO   0DB
00D6:  MOVF   4C,F
00D7:  BTFSS  03.2
00D8:  GOTO   0DB
.................... { 
.................... sira=16; 
00D9:  MOVLW  10
00DA:  MOVWF  4D
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... if(veri<200){ 
00DB:  MOVF   4C,F
00DC:  BTFSS  03.2
00DD:  GOTO   230
00DE:  MOVF   4B,W
00DF:  SUBLW  C7
00E0:  BTFSS  03.0
00E1:  GOTO   230
.................... if(sira==1){ 
00E2:  DECFSZ 4D,W
00E3:  GOTO   0F5
....................    s1=10*veri+540; 
00E4:  CLRF   55
00E5:  MOVLW  0A
00E6:  MOVWF  54
00E7:  MOVF   4C,W
00E8:  MOVWF  57
00E9:  MOVF   4B,W
00EA:  MOVWF  56
00EB:  CALL   031
00EC:  MOVLW  1C
00ED:  ADDWF  78,W
00EE:  MOVWF  2B
00EF:  MOVF   79,W
00F0:  MOVWF  2C
00F1:  MOVLW  02
00F2:  BTFSC  03.0
00F3:  MOVLW  03
00F4:  ADDWF  2C,F
.................... } 
.................... if(sira==2){ 
00F5:  MOVF   4D,W
00F6:  SUBLW  02
00F7:  BTFSS  03.2
00F8:  GOTO   10A
....................    s2=10*veri+540; 
00F9:  CLRF   55
00FA:  MOVLW  0A
00FB:  MOVWF  54
00FC:  MOVF   4C,W
00FD:  MOVWF  57
00FE:  MOVF   4B,W
00FF:  MOVWF  56
0100:  CALL   031
0101:  MOVLW  1C
0102:  ADDWF  78,W
0103:  MOVWF  2D
0104:  MOVF   79,W
0105:  MOVWF  2E
0106:  MOVLW  02
0107:  BTFSC  03.0
0108:  MOVLW  03
0109:  ADDWF  2E,F
.................... } 
.................... if(sira==3){ 
010A:  MOVF   4D,W
010B:  SUBLW  03
010C:  BTFSS  03.2
010D:  GOTO   11F
....................    s3=10*veri+540; 
010E:  CLRF   55
010F:  MOVLW  0A
0110:  MOVWF  54
0111:  MOVF   4C,W
0112:  MOVWF  57
0113:  MOVF   4B,W
0114:  MOVWF  56
0115:  CALL   031
0116:  MOVLW  1C
0117:  ADDWF  78,W
0118:  MOVWF  2F
0119:  MOVF   79,W
011A:  MOVWF  30
011B:  MOVLW  02
011C:  BTFSC  03.0
011D:  MOVLW  03
011E:  ADDWF  30,F
.................... } 
.................... if(sira==4) 
011F:  MOVF   4D,W
0120:  SUBLW  04
0121:  BTFSS  03.2
0122:  GOTO   134
.................... { 
....................  s4=10*veri+540; 
0123:  CLRF   55
0124:  MOVLW  0A
0125:  MOVWF  54
0126:  MOVF   4C,W
0127:  MOVWF  57
0128:  MOVF   4B,W
0129:  MOVWF  56
012A:  CALL   031
012B:  MOVLW  1C
012C:  ADDWF  78,W
012D:  MOVWF  31
012E:  MOVF   79,W
012F:  MOVWF  32
0130:  MOVLW  02
0131:  BTFSC  03.0
0132:  MOVLW  03
0133:  ADDWF  32,F
.................... } 
....................  
.................... if(sira==5) 
0134:  MOVF   4D,W
0135:  SUBLW  05
0136:  BTFSS  03.2
0137:  GOTO   149
.................... { 
....................  s5=10*veri+540; 
0138:  CLRF   55
0139:  MOVLW  0A
013A:  MOVWF  54
013B:  MOVF   4C,W
013C:  MOVWF  57
013D:  MOVF   4B,W
013E:  MOVWF  56
013F:  CALL   031
0140:  MOVLW  1C
0141:  ADDWF  78,W
0142:  MOVWF  33
0143:  MOVF   79,W
0144:  MOVWF  34
0145:  MOVLW  02
0146:  BTFSC  03.0
0147:  MOVLW  03
0148:  ADDWF  34,F
.................... } 
.................... if(sira==6) 
0149:  MOVF   4D,W
014A:  SUBLW  06
014B:  BTFSS  03.2
014C:  GOTO   15E
.................... { 
....................  s6=10*veri+540; 
014D:  CLRF   55
014E:  MOVLW  0A
014F:  MOVWF  54
0150:  MOVF   4C,W
0151:  MOVWF  57
0152:  MOVF   4B,W
0153:  MOVWF  56
0154:  CALL   031
0155:  MOVLW  1C
0156:  ADDWF  78,W
0157:  MOVWF  35
0158:  MOVF   79,W
0159:  MOVWF  36
015A:  MOVLW  02
015B:  BTFSC  03.0
015C:  MOVLW  03
015D:  ADDWF  36,F
.................... } 
.................... if(sira==7) 
015E:  MOVF   4D,W
015F:  SUBLW  07
0160:  BTFSS  03.2
0161:  GOTO   173
.................... { 
....................  s7=10*veri+540; 
0162:  CLRF   55
0163:  MOVLW  0A
0164:  MOVWF  54
0165:  MOVF   4C,W
0166:  MOVWF  57
0167:  MOVF   4B,W
0168:  MOVWF  56
0169:  CALL   031
016A:  MOVLW  1C
016B:  ADDWF  78,W
016C:  MOVWF  37
016D:  MOVF   79,W
016E:  MOVWF  38
016F:  MOVLW  02
0170:  BTFSC  03.0
0171:  MOVLW  03
0172:  ADDWF  38,F
.................... } 
.................... if(sira==8) 
0173:  MOVF   4D,W
0174:  SUBLW  08
0175:  BTFSS  03.2
0176:  GOTO   188
.................... { 
....................  s8=10*veri+540; 
0177:  CLRF   55
0178:  MOVLW  0A
0179:  MOVWF  54
017A:  MOVF   4C,W
017B:  MOVWF  57
017C:  MOVF   4B,W
017D:  MOVWF  56
017E:  CALL   031
017F:  MOVLW  1C
0180:  ADDWF  78,W
0181:  MOVWF  39
0182:  MOVF   79,W
0183:  MOVWF  3A
0184:  MOVLW  02
0185:  BTFSC  03.0
0186:  MOVLW  03
0187:  ADDWF  3A,F
.................... } 
.................... if(sira==9) 
0188:  MOVF   4D,W
0189:  SUBLW  09
018A:  BTFSS  03.2
018B:  GOTO   19D
.................... { 
....................  s9=10*veri+540; 
018C:  CLRF   55
018D:  MOVLW  0A
018E:  MOVWF  54
018F:  MOVF   4C,W
0190:  MOVWF  57
0191:  MOVF   4B,W
0192:  MOVWF  56
0193:  CALL   031
0194:  MOVLW  1C
0195:  ADDWF  78,W
0196:  MOVWF  3B
0197:  MOVF   79,W
0198:  MOVWF  3C
0199:  MOVLW  02
019A:  BTFSC  03.0
019B:  MOVLW  03
019C:  ADDWF  3C,F
.................... } 
.................... if(sira==10) 
019D:  MOVF   4D,W
019E:  SUBLW  0A
019F:  BTFSS  03.2
01A0:  GOTO   1B2
.................... { 
....................  s10=10*veri+540; 
01A1:  CLRF   55
01A2:  MOVLW  0A
01A3:  MOVWF  54
01A4:  MOVF   4C,W
01A5:  MOVWF  57
01A6:  MOVF   4B,W
01A7:  MOVWF  56
01A8:  CALL   031
01A9:  MOVLW  1C
01AA:  ADDWF  78,W
01AB:  MOVWF  3D
01AC:  MOVF   79,W
01AD:  MOVWF  3E
01AE:  MOVLW  02
01AF:  BTFSC  03.0
01B0:  MOVLW  03
01B1:  ADDWF  3E,F
.................... } 
.................... if(sira==11) 
01B2:  MOVF   4D,W
01B3:  SUBLW  0B
01B4:  BTFSS  03.2
01B5:  GOTO   1C7
.................... { 
....................  s11=10*veri+540; 
01B6:  CLRF   55
01B7:  MOVLW  0A
01B8:  MOVWF  54
01B9:  MOVF   4C,W
01BA:  MOVWF  57
01BB:  MOVF   4B,W
01BC:  MOVWF  56
01BD:  CALL   031
01BE:  MOVLW  1C
01BF:  ADDWF  78,W
01C0:  MOVWF  3F
01C1:  MOVF   79,W
01C2:  MOVWF  40
01C3:  MOVLW  02
01C4:  BTFSC  03.0
01C5:  MOVLW  03
01C6:  ADDWF  40,F
.................... } 
.................... if(sira==12) 
01C7:  MOVF   4D,W
01C8:  SUBLW  0C
01C9:  BTFSS  03.2
01CA:  GOTO   1DC
.................... { 
....................  s12=10*veri+540; 
01CB:  CLRF   55
01CC:  MOVLW  0A
01CD:  MOVWF  54
01CE:  MOVF   4C,W
01CF:  MOVWF  57
01D0:  MOVF   4B,W
01D1:  MOVWF  56
01D2:  CALL   031
01D3:  MOVLW  1C
01D4:  ADDWF  78,W
01D5:  MOVWF  41
01D6:  MOVF   79,W
01D7:  MOVWF  42
01D8:  MOVLW  02
01D9:  BTFSC  03.0
01DA:  MOVLW  03
01DB:  ADDWF  42,F
.................... } 
.................... if(sira==13) 
01DC:  MOVF   4D,W
01DD:  SUBLW  0D
01DE:  BTFSS  03.2
01DF:  GOTO   1F1
.................... { 
....................  s13=10*veri+540; 
01E0:  CLRF   55
01E1:  MOVLW  0A
01E2:  MOVWF  54
01E3:  MOVF   4C,W
01E4:  MOVWF  57
01E5:  MOVF   4B,W
01E6:  MOVWF  56
01E7:  CALL   031
01E8:  MOVLW  1C
01E9:  ADDWF  78,W
01EA:  MOVWF  43
01EB:  MOVF   79,W
01EC:  MOVWF  44
01ED:  MOVLW  02
01EE:  BTFSC  03.0
01EF:  MOVLW  03
01F0:  ADDWF  44,F
.................... } 
.................... if(sira==14) 
01F1:  MOVF   4D,W
01F2:  SUBLW  0E
01F3:  BTFSS  03.2
01F4:  GOTO   206
.................... { 
....................  s14=10*veri+540; 
01F5:  CLRF   55
01F6:  MOVLW  0A
01F7:  MOVWF  54
01F8:  MOVF   4C,W
01F9:  MOVWF  57
01FA:  MOVF   4B,W
01FB:  MOVWF  56
01FC:  CALL   031
01FD:  MOVLW  1C
01FE:  ADDWF  78,W
01FF:  MOVWF  45
0200:  MOVF   79,W
0201:  MOVWF  46
0202:  MOVLW  02
0203:  BTFSC  03.0
0204:  MOVLW  03
0205:  ADDWF  46,F
.................... } 
.................... if(sira==15) 
0206:  MOVF   4D,W
0207:  SUBLW  0F
0208:  BTFSS  03.2
0209:  GOTO   21B
.................... { 
....................  s15=10*veri+540; 
020A:  CLRF   55
020B:  MOVLW  0A
020C:  MOVWF  54
020D:  MOVF   4C,W
020E:  MOVWF  57
020F:  MOVF   4B,W
0210:  MOVWF  56
0211:  CALL   031
0212:  MOVLW  1C
0213:  ADDWF  78,W
0214:  MOVWF  47
0215:  MOVF   79,W
0216:  MOVWF  48
0217:  MOVLW  02
0218:  BTFSC  03.0
0219:  MOVLW  03
021A:  ADDWF  48,F
.................... } 
.................... if(sira==16) 
021B:  MOVF   4D,W
021C:  SUBLW  10
021D:  BTFSS  03.2
021E:  GOTO   230
.................... { 
....................  s16=10*veri+540; 
021F:  CLRF   55
0220:  MOVLW  0A
0221:  MOVWF  54
0222:  MOVF   4C,W
0223:  MOVWF  57
0224:  MOVF   4B,W
0225:  MOVWF  56
0226:  CALL   031
0227:  MOVLW  1C
0228:  ADDWF  78,W
0229:  MOVWF  49
022A:  MOVF   79,W
022B:  MOVWF  4A
022C:  MOVLW  02
022D:  BTFSC  03.0
022E:  MOVLW  03
022F:  ADDWF  4A,F
.................... } 
....................  
....................  
.................... } 
.................... output_toggle(pin_a1); //kesme geldi belirteci 
0230:  BSF    03.5
0231:  BCF    05.1
0232:  MOVLW  02
0233:  BCF    03.5
0234:  XORWF  05,F
0235:  BCF    0C.5
0236:  BCF    0A.3
0237:  BCF    0A.4
0238:  GOTO   01D
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
